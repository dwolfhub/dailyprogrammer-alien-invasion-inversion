import unittest
from aliens import field_parser 


class TestOpening(unittest.TestCase):

    def test_opening_sets_indices(self):
        opening = field_parser.Opening([0,1,2])
        self.assertEqual([0,1,2], opening.indices)
    
    def test_matches_opening(self):
        opening_1 = field_parser.Opening([0,1,2])
        opening_2 = field_parser.Opening([0,1])
        match = opening_1.matches_opening(opening_2)
        self.assertEquals([0,1], match.indices)

        opening_1 = field_parser.Opening([0,1])
        opening_2 = field_parser.Opening([0,1,2])
        match = opening_1.matches_opening(opening_2)
        self.assertEqual([0,1], match.indices)


class TestDashOpeningParser(unittest.TestCase):
    
    def test_init_sets_opening_char(self):
        parser = field_parser.DashOpeningParser()
        self.assertEqual('-', parser.opening_char)

    def test_get_openings_returns_array_of_openings(self):
        parser = field_parser.DashOpeningParser()
        openings = parser.get_openings('---x--x----')
        self.assertEquals(3, len(openings))
        self.assertEqual([0,1,2], openings[0].indices)
        self.assertEqual([4,5], openings[1].indices)
        self.assertEqual([7,8,9,10], openings[2].indices)

        openings = parser.get_openings('----')
        self.assertEqual(1, len(openings))
        self.assertEqual([0,1,2,3], openings[0].indices)
        
        openings = parser.get_openings('xxxx')
        self.assertEqual(0, len(openings))
        self.assertEqual([], openings)


class TestSquare(unittest.TestCase):
    def test_init_sets_instance_vars(self):
        opening = field_parser.Opening([1,2,3])
        square = field_parser.Square(opening)
        self.assertEqual(1, square.rows)
        self.assertEqual(opening, square.opening)

    def test_size_rows_bigger(self):
        opening = field_parser.Opening([1,2,3])
        square = field_parser.Square(opening)
        self.assertEqual(1, square.size())
        square.rows = 9
        self.assertEqual(9, square.size())

class TestFieldParser(unittest.TestCase):

    def test_init_sets_ifile_and_squares(self):
        ifile = open('/dev/null')
        fp = field_parser.FieldParser(ifile, field_parser.DashOpeningParser())
        self.assertEqual(ifile, fp.ifile)
        self.assertEqual([], fp.squares)

    def test_get_biggest_square(self):
        lines = [
            'x---x',
            'x---x',
            'x---x',
            'x---x',
        ];
        fp = field_parser.FieldParser(lines, field_parser.DashOpeningParser())

        self.assertEqual(9, fp.get_biggest_square())

        lines = [
            'x----x',
            'xx---x',
            '------',
            '------',
            '------',
            '------',
        ]
        fp = field_parser.FieldParser(lines, field_parser.DashOpeningParser())

        self.assertEqual(16, fp.get_biggest_square())
        
        lines = [
            '-------',
            '---x---',
            '---xx--',
            '--xxx--',
            '--xxx--',
            'xxxxxxx',
            'xxxxxxx',
        ]
        fp = field_parser.FieldParser(lines, field_parser.DashOpeningParser())

        self.assertEqual(9, fp.get_biggest_square())

        lines = [
            '--------------X------X-----------X-X---X--X--X----X--------X--------------------X-------------------',
            '-------------------X-X--------------------------------X-----------------X---------X-----X-----------',
            '------------X------X------------------------X----X--------XXX---------------X---------------------XX',
            '-----------------------------X-------------------------------X-----------X-----X------------X--X----',
            '---------------------------X-------------XX------------XX---X-X--X----------X---X---X------X--------',
            '----------------X--X---------------X--------X-X--X---------------X--------------------X-------------',
            '--XX------X-X--------X-----------XX-X-----X-------XX--------X-X----------------------------------X--',
            '---------X-------X-------------------X---------XX---------------X----------X-X-X-----------X-------X',
            '-X---------------X-X--------X--X---X-----------------------------------------X-X---X-----X-X----XXXX',
            '------X----------------------------------X--X----X--X--X--------------X------X---------X------X-X---',
            '-X---X--------X---------------XX----------------X-----------X--X-X--------------X--X-----X----------',
            'X-X----X-----------------X-X---------------------X----------X-------------------X-----------X-------',
            '-X-----X---XX------X--X---------X--XX----X----X--------------XXX--X-------------X-------X--X----X---',
            '-----X-------------X-X---------------X---------------------X---------XX-----------------------------',
            'X--------------------------------------X-XX---------------X----------------------------------------X',
            '-X------------X-------X--X-----------X-------X------X----------X-------------------X------X-X----X--',
            'X-----X--X-X------------------X--------X---------------X--------X-----------------------------------',
            '-------------X--------X------------------------X-XX---------------X-XX------------X-----------------',
            '---X--------------------X--X--X---------X-------X-------------X----X------------X--X---X------------',
            '--------------------X-----------X--------------------X------------------------------------------X---',
            '-------------X----X----X-------X--------X-X-----X-XX-------------------X-XX----X---------X---X----X-',
            '---------------XX--------------X----------------------X---X-------------X-----------X---------X-----',
            '---X------------------------X-------------------------X--X-X---------------X----X-------------------',
            '-----------------X-----------------X---------X---------X--------------X-------X----------X----------',
            '-------------X--------X--------X--------------------------------X--X-----X----X---------------------',
            '----X----X--X--------X-----X----------------------------X----------X-----------X-X-------X----------',
            '-XX---X----------------X---------X-X-----X-----------------X---X---------X--------------X-XX---X----',
            '-------------X-----XX-------X----X-------X------------X-------X-X----X-----X-X-------------------XX-',
            '-----X------------X-----X---------------X----------X----------X--XX-------X-X-----X-----X-----------',
            '--------X----X----X------X--------------X-------X----------X---X---X---X--------------X--X----------',
            '---------X-----------------------XX--X-----------X-----------XX--------------X--------------X-------',
            'X-----------------------------------X------X-----------------------------------------------XX-----X-',
            '-------X---------X-----X-------------X-----X-----------X----X-------------------X-----X------X------',
            'X--------------------------------------------------------------------------------X-----X------------',
            '-------X------------------------X-----X-X--X------X----------XX--X-------------X-------------------X',
            '--------------X-X---------X------------X-----------X-------------X----------X-------X---------------',
            'X-X-X-------------X-----------------------X---X---X--X--------XX---X-----------X---------X----------',
            '-----------X--------------XXX----XX------------------------------------X--X--X-X-------X-X---------X',
            '-------------------------X-----------------X----------------------XX--X--X------X-------------X-----',
            '--X-X---X-X----------------X---X-------X------XX-----------------X---X--X-------------X-X---X------X',
            '------X-----X--------X---X----X------------------------X---X----X-------------------X---------------',
            '---------------X-----------X-----X---------X-------------X---------X----X----------X---X--X-X--X----',
            '---------------------X--------X--X-X--------------------------X----------X----------------------X---',
            'X---X---X--X----------X------------X----------X-X------X-------------------X------X------------X----',
            '----X---X---X-X--X-------------------X---------X---X---X------X----------------X------X-------------',
            '-X-------X-------X----------------------X----------------X--------X-----X----------------------XX--X',
            '---------XX-X---X--X-----------X--X--------------X-------------X--------------X----X----------------',
            '-----------------------X------------X------------------------X------X-----------X-----XX-----X----X-',
            '---------------------X---X----XX---------X---------------------------------X--X---X-----------X---X-',
            '-----X----X-----X-X-------------X-X-----------X--X-------XX--------------X----X-X----XXX---X--------',
            '-----------------X-X-------------X-----X-------X-XX-------------X----------------X-X----------X-----',
            '------------X-X----------X---------------------------------X------X--------X---X---X----------------',
            '--X------------------------X---------X---------------X------X-------X-----XX--------X----X-------X--',
            '---XXX--------------------------X------X-----X-----------X-------------------X--------XX----------X-',
            '---------X----X-------X-X-X---------------X-X----X--------------X-----X----------X----------------X-',
            '--------X--X-X---------X------------------X---------X---------------------X----------------X--------',
            '-----------------X------------------X----------X---X---XX-----X---X--------------------------------X',
            '---------------------X-X----------XX--XX-----X-------X--X-----X---------X-X---------X---X-----------',
            '-----X-------------X-X--------X----------X-----------------X-X-----X----------X----X----------X---X-',
            '-------------------X-------X--X---X--X--X----------X-----------------------X--------X--X-------X---X',
            '----X------X------XX------X---------------------------X--X----------------X---------------X------X--',
            '--X---X------X----------X------------X-X-X-----------X-X---------------X----X------------X----------',
            '-------X--X-----XX----------X-----------------------------------X---------------------------------X-',
            '-----X-----------XX-------X-----------------X----X---------XX------X-----X---X------XX---X--X-------',
            '---------X----------------X----X-X-----------X------X--------X-X--------------------------X----X----',
            'X----------------------X-----------------X-------X---X--------------X-X-X-XX------X----------X--X-X-',
            'X-----X------X-----------------------------X---------------------X----------X-XX------X-X-X-------X-',
            '------------X---X--X------X-X---------X-----X---------X-------------------------X-------------X-----',
            '---------------------X---X---------X------------------------------------------X-------X-X-----------',
            '-----------------X--------XX----------X---X----------------X-----------------------X----------------',
            '-XX-------X-----X--------------------X-------X---X-------------X-------X--X---X-------X-------X-----',
            '-----------X--------XX----X---X------X------X---X--------------------------------------X----X------X',
            '--------------X------X--XX-------XX-------------X---------X---X---------X------X-------X------------',
            '----XX----------------------------------------X-------X---------X-------------------X--------------X',
            '----------------X---X--------X----X--X-------------X---XX---X---------------X----X--X---------------',
            '---------------X------------------X------X--X---------X--------------X---X-----------X--------X-----',
            '----------X-------X------------X-X------X----X---------------------X--X----------X----------------X-',
            '---------X------X-----------------------------------------------------X---X------X------------------',
            '-----X-----------------X------------------------------X-------X-----X--X-----X-----X----------------',
            '----X---------------------X---------------X------X------------------------------------------X----X--',
            '-------X--X-------X-----------------X-----------XX---X-----------XX------X--------------------XX----',
            '-----X------------------X--------X----X----X-------------------XX-------------------------X-------X-',
            '-----XX---------------------------------------X------------X------X------XXX------X---------X------X',
            'X-------X------X----------X--X------X-X----------XX-----X------XX-------------------X-----X---------',
            '--X---X----------X-X---X------XX---------------X-----X--X--------X---------------------X----X-------',
            '-X-X----------XX---X-X------------------------------XXX---X--X---X---X--X---X-----X-----X------X----',
            '-------X---------------X--X-------------------X-----------X--------X----------------------X--X------',
            '-------------------X-------------------------X-------X-X-----------------X------------X-X-----------',
            '-----X-X------X----------------------------X-------------X-----------XX-----------------------------',
            '----X----X-------------------------X----XX---------------X--X--X-----X-----X----------------------X-',
            '-------------------X--------X-----------X---------X------X-----X-X----------------------------------',
            '--X------------X-----------XXX-------X--------X-------------X------------X----X---------------------',
            '-----------X--------X---------------------------------------------------X-------------X-------------',
            '-X----XX--------------------------X--X--------X----X-------X-------X----X-------XX---X------------X-',
            '-------X------------------------------X--X------X--X-------X--X------------X---------X--------------',
            '-XX--------X----X-X---X--------------------------X---X-X------------------------------XX------------',
            '----------X-----XX------------------X-X--------X-X-X---X--XX------------X-X-X--X--------------------',
            'X-------X-------XX---X-X--XX--------X---X-------------------------------X--------------------X------',
            '-X-----------------------------------X-----X--------------------------------X-------XX--------------',
            '--X------------------------X-XX----------------X-------X-------X--------------X-----X-X------X---X--',
        ]
        fp = field_parser.FieldParser(lines, field_parser.DashOpeningParser())

        self.assertEqual(81, fp.get_biggest_square())

        lines = [
            '--X---------X----------------------X---XXX--------',
            '-X----------X-------------------XX------XX--XX--X-',
            '---------X---X--X-------XX----------------------X-',
            '----------------------X----X---XX---X-------X----X',
            '------------------X----------X--------X----------X',
            '----XX---X----------------X---X-X-----------------',
            '---X----------------------------------X-------X---',
            '-X-------X--XX----------X----X--X--X----------X---',
            '---------X---------------X----------------------X-',
            '-------------X------------------------X-----------',
            '-X---------------------------XX----------X--------',
            '--X--------------------X-X--------------------X---',
            'X---X-----------X-------------X------------X------',
            '---X-----------------------X-------------------X--',
            '-------X--------------X--X-----X------------------',
            '--------X------X------X----------XXX----X--X---X-X',
            '------------------X-------X----X--X---------------',
            '----X----X----------------------------------X-----',
            '-----------X-----X--------X--------X--------------',
            '--X------X-------------X--------------------X-----',
            '------X----X----------------------X---------XX----',
            '----XX----------X-----------------X---------X-X---',
            '-----X------X------X----X-------XXX-X-------------',
            '---X-X--------------------------------------------',
            '-----------------X----------------X---------------',
            '----X-------------X----------------------X--X-----',
            '------X---------XX--X---------X--------X----------',
            'XX--------X-----------------X-------------X---X---',
            '-----------X-X--------X---X--------X---X--------X-',
            '-------------------X-------XXX---X----------------',
            '-------X-----X-------------------------------X----',
            '----X------X------X--X---------------X------------',
            '--------X--------X--------------X-----------------',
            '--------X------------------X-------X--------X---X-',
            'X--X--X---X------X----------X--X--X---------------',
            '-----------X--X-------------X-----------------X---',
            '--------------X-------X-----X-----------------X---',
            '-----------------X----------------------X-X--X----',
            '----------------X----------------------------X----',
            '---------------X----------X-----------X-----------',
            '---X-X-----------------XX----X-----XX------------X',
            '--X-X-------------------X-------------------X--X--',
            '--X------X----------------------------------------',
            '----X-------------------------X---X--------X-----X',
            'X--XX----X-------------X---X----------------------',
            '---------X---------------------------------------X',
            'X-------X---------X--X-----XX--------------X------',
            '------XX---------X--X---------X-------------------',
            '--------X----------X---X--X-----X------X-----X----',
            '----------------------------------------------X---',
        ]
        fp = field_parser.FieldParser(lines, field_parser.DashOpeningParser())

        self.assertEqual(49, fp.get_biggest_square())

        lines = [
            'X--X-',
            '-----',
            '-----',
            '-----',
            '---X-',
        ]
        fp = field_parser.FieldParser(lines, field_parser.DashOpeningParser())

        self.assertEqual(9, fp.get_biggest_square())


if __name__ == '__main__':
    unittest.main()
